/**
 * Autogenerated by Thrift for /home/adrien/Documents/epfl/MA/cs-471/project/dep/if/chatroom.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */

#include "if/gen-cpp2/ChatRoomService.h"
#include "if/gen-cpp2/ChatRoomService.tcc"
#include "if/gen-cpp2/chatroom_metadata.h"
#include <thrift/lib/cpp2/gen/service_cpp.h>

namespace example { namespace chatroom {
std::unique_ptr<apache::thrift::AsyncProcessor> ChatRoomServiceSvIf::getProcessor() {
  return std::make_unique<ChatRoomServiceAsyncProcessor>(this);
}

ChatRoomServiceSvIf::CreateMethodMetadataResult ChatRoomServiceSvIf::createMethodMetadata() {
  return ::apache::thrift::detail::ap::createMethodMetadataMap<ChatRoomServiceAsyncProcessor>();
}


void ChatRoomServiceSvIf::initialize() {
  apache::thrift::detail::si::throw_app_exn_unimplemented("initialize");
}

folly::SemiFuture<folly::Unit> ChatRoomServiceSvIf::semifuture_initialize() {
  auto expected{apache::thrift::detail::si::InvocationType::SemiFuture};
  __fbthrift_invocation_initialize.compare_exchange_strong(expected, apache::thrift::detail::si::InvocationType::Sync, std::memory_order_relaxed);
  initialize();
  return folly::makeSemiFuture();
}

folly::Future<folly::Unit> ChatRoomServiceSvIf::future_initialize() {
  auto expected{apache::thrift::detail::si::InvocationType::Future};
  __fbthrift_invocation_initialize.compare_exchange_strong(expected, apache::thrift::detail::si::InvocationType::SemiFuture, std::memory_order_relaxed);
  return apache::thrift::detail::si::future(semifuture_initialize(), getInternalKeepAlive());
}

void ChatRoomServiceSvIf::async_tm_initialize(std::unique_ptr<apache::thrift::HandlerCallback<void>> callback) {
  // It's possible the coroutine versions will delegate to a future-based
  // version. If that happens, we need the RequestParams arguments to be
  // available to the future through the thread-local backchannel, so we create
  // a RAII object that sets up RequestParams and clears them on destruction.
  apache::thrift::detail::si::AsyncTmPrep asyncTmPrep(this, callback.get());
  auto invocationType = __fbthrift_invocation_initialize.load(std::memory_order_relaxed);
  try {
    switch (invocationType) {
      case apache::thrift::detail::si::InvocationType::AsyncTm:
      {
        __fbthrift_invocation_initialize.compare_exchange_strong(invocationType, apache::thrift::detail::si::InvocationType::Future, std::memory_order_relaxed);
        FOLLY_FALLTHROUGH;
      }
      case apache::thrift::detail::si::InvocationType::Future:
      {
        auto fut = future_initialize();
        apache::thrift::detail::si::async_tm_future(std::move(callback), std::move(fut));
        return;
      }
      case apache::thrift::detail::si::InvocationType::SemiFuture:
      {
        auto fut = semifuture_initialize();
        apache::thrift::detail::si::async_tm_semifuture(std::move(callback), std::move(fut));
        return;
      }
      case apache::thrift::detail::si::InvocationType::Sync:
      {
        initialize();
        callback->done();
        return;
      }
      default:
      {
        folly::assume_unreachable();
      }
    }
  } catch (...) {
    callback->exception(std::current_exception());
  }
}

void ChatRoomServiceSvIf::getMessages(::example::chatroom::GetMessagesResponse& /*_return*/, std::unique_ptr<::example::chatroom::GetMessagesRequest> /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("getMessages");
}

folly::SemiFuture<std::unique_ptr<::example::chatroom::GetMessagesResponse>> ChatRoomServiceSvIf::semifuture_getMessages(std::unique_ptr<::example::chatroom::GetMessagesRequest> p_req) {
  auto expected{apache::thrift::detail::si::InvocationType::SemiFuture};
  __fbthrift_invocation_getMessages.compare_exchange_strong(expected, apache::thrift::detail::si::InvocationType::Sync, std::memory_order_relaxed);
  auto ret = std::make_unique<::example::chatroom::GetMessagesResponse>();
  getMessages(*ret, std::move(p_req));
  return folly::makeSemiFuture(std::move(ret));
}

folly::Future<std::unique_ptr<::example::chatroom::GetMessagesResponse>> ChatRoomServiceSvIf::future_getMessages(std::unique_ptr<::example::chatroom::GetMessagesRequest> p_req) {
  auto expected{apache::thrift::detail::si::InvocationType::Future};
  __fbthrift_invocation_getMessages.compare_exchange_strong(expected, apache::thrift::detail::si::InvocationType::SemiFuture, std::memory_order_relaxed);
  return apache::thrift::detail::si::future(semifuture_getMessages(std::move(p_req)), getInternalKeepAlive());
}

void ChatRoomServiceSvIf::async_tm_getMessages(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr<::example::chatroom::GetMessagesResponse>>> callback, std::unique_ptr<::example::chatroom::GetMessagesRequest> p_req) {
  // It's possible the coroutine versions will delegate to a future-based
  // version. If that happens, we need the RequestParams arguments to be
  // available to the future through the thread-local backchannel, so we create
  // a RAII object that sets up RequestParams and clears them on destruction.
  apache::thrift::detail::si::AsyncTmPrep asyncTmPrep(this, callback.get());
  auto invocationType = __fbthrift_invocation_getMessages.load(std::memory_order_relaxed);
  try {
    switch (invocationType) {
      case apache::thrift::detail::si::InvocationType::AsyncTm:
      {
        __fbthrift_invocation_getMessages.compare_exchange_strong(invocationType, apache::thrift::detail::si::InvocationType::Future, std::memory_order_relaxed);
        FOLLY_FALLTHROUGH;
      }
      case apache::thrift::detail::si::InvocationType::Future:
      {
        auto fut = future_getMessages(std::move(p_req));
        apache::thrift::detail::si::async_tm_future(std::move(callback), std::move(fut));
        return;
      }
      case apache::thrift::detail::si::InvocationType::SemiFuture:
      {
        auto fut = semifuture_getMessages(std::move(p_req));
        apache::thrift::detail::si::async_tm_semifuture(std::move(callback), std::move(fut));
        return;
      }
      case apache::thrift::detail::si::InvocationType::Sync:
      {
        ::example::chatroom::GetMessagesResponse _return;
        getMessages(_return, std::move(p_req));
        callback->result(_return);
        return;
      }
      default:
      {
        folly::assume_unreachable();
      }
    }
  } catch (...) {
    callback->exception(std::current_exception());
  }
}

void ChatRoomServiceSvIf::sendMessage(std::unique_ptr<::example::chatroom::SendMessageRequest> /*req*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("sendMessage");
}

folly::SemiFuture<folly::Unit> ChatRoomServiceSvIf::semifuture_sendMessage(std::unique_ptr<::example::chatroom::SendMessageRequest> p_req) {
  auto expected{apache::thrift::detail::si::InvocationType::SemiFuture};
  __fbthrift_invocation_sendMessage.compare_exchange_strong(expected, apache::thrift::detail::si::InvocationType::Sync, std::memory_order_relaxed);
  sendMessage(std::move(p_req));
  return folly::makeSemiFuture();
}

folly::Future<folly::Unit> ChatRoomServiceSvIf::future_sendMessage(std::unique_ptr<::example::chatroom::SendMessageRequest> p_req) {
  auto expected{apache::thrift::detail::si::InvocationType::Future};
  __fbthrift_invocation_sendMessage.compare_exchange_strong(expected, apache::thrift::detail::si::InvocationType::SemiFuture, std::memory_order_relaxed);
  return apache::thrift::detail::si::future(semifuture_sendMessage(std::move(p_req)), getInternalKeepAlive());
}

void ChatRoomServiceSvIf::async_tm_sendMessage(std::unique_ptr<apache::thrift::HandlerCallback<void>> callback, std::unique_ptr<::example::chatroom::SendMessageRequest> p_req) {
  // It's possible the coroutine versions will delegate to a future-based
  // version. If that happens, we need the RequestParams arguments to be
  // available to the future through the thread-local backchannel, so we create
  // a RAII object that sets up RequestParams and clears them on destruction.
  apache::thrift::detail::si::AsyncTmPrep asyncTmPrep(this, callback.get());
  auto invocationType = __fbthrift_invocation_sendMessage.load(std::memory_order_relaxed);
  try {
    switch (invocationType) {
      case apache::thrift::detail::si::InvocationType::AsyncTm:
      {
        __fbthrift_invocation_sendMessage.compare_exchange_strong(invocationType, apache::thrift::detail::si::InvocationType::Future, std::memory_order_relaxed);
        FOLLY_FALLTHROUGH;
      }
      case apache::thrift::detail::si::InvocationType::Future:
      {
        auto fut = future_sendMessage(std::move(p_req));
        apache::thrift::detail::si::async_tm_future(std::move(callback), std::move(fut));
        return;
      }
      case apache::thrift::detail::si::InvocationType::SemiFuture:
      {
        auto fut = semifuture_sendMessage(std::move(p_req));
        apache::thrift::detail::si::async_tm_semifuture(std::move(callback), std::move(fut));
        return;
      }
      case apache::thrift::detail::si::InvocationType::Sync:
      {
        sendMessage(std::move(p_req));
        callback->done();
        return;
      }
      default:
      {
        folly::assume_unreachable();
      }
    }
  } catch (...) {
    callback->exception(std::current_exception());
  }
}

void ChatRoomServiceSvNull::initialize() {
  return;
}

void ChatRoomServiceSvNull::getMessages(::example::chatroom::GetMessagesResponse& /*_return*/, std::unique_ptr<::example::chatroom::GetMessagesRequest> /*req*/) {}

void ChatRoomServiceSvNull::sendMessage(std::unique_ptr<::example::chatroom::SendMessageRequest> /*req*/) {
  return;
}



const char* ChatRoomServiceAsyncProcessor::getServiceName() {
  return "ChatRoomService";
}

void ChatRoomServiceAsyncProcessor::getServiceMetadata(apache::thrift::metadata::ThriftServiceMetadataResponse& response) {
  ::apache::thrift::detail::md::ServiceMetadata<ChatRoomServiceSvIf>::gen(response);
}

void ChatRoomServiceAsyncProcessor::processSerializedCompressedRequest(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedCompressedRequest&& serializedRequest, apache::thrift::protocol::PROTOCOL_TYPES protType, apache::thrift::Cpp2RequestContext* context, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm) {
  apache::thrift::detail::ap::process(this, std::move(req), std::move(serializedRequest), protType, context, eb, tm);
}

void ChatRoomServiceAsyncProcessor::processSerializedCompressedRequestWithMetadata(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedCompressedRequest&& serializedRequest, const apache::thrift::AsyncProcessorFactory::MethodMetadata& methodMetadata, apache::thrift::protocol::PROTOCOL_TYPES protType, apache::thrift::Cpp2RequestContext* context, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm) {
  apache::thrift::detail::ap::process(this, std::move(req), std::move(serializedRequest), methodMetadata, protType, context, eb, tm);
}

const ChatRoomServiceAsyncProcessor::ProcessMap& ChatRoomServiceAsyncProcessor::getOwnProcessMap() {
  return kOwnProcessMap_;
}

const ChatRoomServiceAsyncProcessor::ProcessMap ChatRoomServiceAsyncProcessor::kOwnProcessMap_ {
  {"initialize", {&ChatRoomServiceAsyncProcessor::setUpAndProcess_initialize<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>, &ChatRoomServiceAsyncProcessor::setUpAndProcess_initialize<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>}},
  {"getMessages", {&ChatRoomServiceAsyncProcessor::setUpAndProcess_getMessages<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>, &ChatRoomServiceAsyncProcessor::setUpAndProcess_getMessages<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>}},
  {"sendMessage", {&ChatRoomServiceAsyncProcessor::setUpAndProcess_sendMessage<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>, &ChatRoomServiceAsyncProcessor::setUpAndProcess_sendMessage<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>}},
};

}} // example::chatroom
