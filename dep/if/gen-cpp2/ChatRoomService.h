/**
 * Autogenerated by Thrift for /home/adrien/Documents/epfl/MA/cs-471/project/dep/if/chatroom.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#pragma once

#include <thrift/lib/cpp2/gen/service_h.h>

#include "if/gen-cpp2/ChatRoomServiceAsyncClient.h"
#include "if/gen-cpp2/chatroom_types.h"

namespace folly {
  class IOBuf;
  class IOBufQueue;
}
namespace apache { namespace thrift {
  class Cpp2RequestContext;
  class BinaryProtocolReader;
  class CompactProtocolReader;
  namespace transport { class THeader; }
}}

namespace example { namespace chatroom {

class ChatRoomServiceSvAsyncIf {
 public:
  virtual ~ChatRoomServiceSvAsyncIf() {}
  virtual void async_tm_initialize(std::unique_ptr<apache::thrift::HandlerCallback<void>> callback) = 0;
  virtual folly::Future<folly::Unit> future_initialize() = 0;
  virtual folly::SemiFuture<folly::Unit> semifuture_initialize() = 0;
  virtual void async_tm_getMessages(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr<::example::chatroom::GetMessagesResponse>>> callback, std::unique_ptr<::example::chatroom::GetMessagesRequest> p_req) = 0;
  virtual folly::Future<std::unique_ptr<::example::chatroom::GetMessagesResponse>> future_getMessages(std::unique_ptr<::example::chatroom::GetMessagesRequest> p_req) = 0;
  virtual folly::SemiFuture<std::unique_ptr<::example::chatroom::GetMessagesResponse>> semifuture_getMessages(std::unique_ptr<::example::chatroom::GetMessagesRequest> p_req) = 0;
  virtual void async_tm_sendMessage(std::unique_ptr<apache::thrift::HandlerCallback<void>> callback, std::unique_ptr<::example::chatroom::SendMessageRequest> p_req) = 0;
  virtual folly::Future<folly::Unit> future_sendMessage(std::unique_ptr<::example::chatroom::SendMessageRequest> p_req) = 0;
  virtual folly::SemiFuture<folly::Unit> semifuture_sendMessage(std::unique_ptr<::example::chatroom::SendMessageRequest> p_req) = 0;
};

class ChatRoomServiceAsyncProcessor;

class ChatRoomServiceSvIf : public ChatRoomServiceSvAsyncIf, public apache::thrift::ServerInterface {
 public:
  std::string_view getGeneratedName() const override { return "ChatRoomService"; }

  typedef ChatRoomServiceAsyncProcessor ProcessorType;
  std::unique_ptr<apache::thrift::AsyncProcessor> getProcessor() override;
  CreateMethodMetadataResult createMethodMetadata() override;


  virtual void initialize();
  folly::Future<folly::Unit> future_initialize() override;
  folly::SemiFuture<folly::Unit> semifuture_initialize() override;
  void async_tm_initialize(std::unique_ptr<apache::thrift::HandlerCallback<void>> callback) override;
  virtual void getMessages(::example::chatroom::GetMessagesResponse& /*_return*/, std::unique_ptr<::example::chatroom::GetMessagesRequest> /*req*/);
  folly::Future<std::unique_ptr<::example::chatroom::GetMessagesResponse>> future_getMessages(std::unique_ptr<::example::chatroom::GetMessagesRequest> p_req) override;
  folly::SemiFuture<std::unique_ptr<::example::chatroom::GetMessagesResponse>> semifuture_getMessages(std::unique_ptr<::example::chatroom::GetMessagesRequest> p_req) override;
  void async_tm_getMessages(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr<::example::chatroom::GetMessagesResponse>>> callback, std::unique_ptr<::example::chatroom::GetMessagesRequest> p_req) override;
  virtual void sendMessage(std::unique_ptr<::example::chatroom::SendMessageRequest> /*req*/);
  folly::Future<folly::Unit> future_sendMessage(std::unique_ptr<::example::chatroom::SendMessageRequest> p_req) override;
  folly::SemiFuture<folly::Unit> semifuture_sendMessage(std::unique_ptr<::example::chatroom::SendMessageRequest> p_req) override;
  void async_tm_sendMessage(std::unique_ptr<apache::thrift::HandlerCallback<void>> callback, std::unique_ptr<::example::chatroom::SendMessageRequest> p_req) override;
 private:
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_initialize{apache::thrift::detail::si::InvocationType::AsyncTm};
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_getMessages{apache::thrift::detail::si::InvocationType::AsyncTm};
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_sendMessage{apache::thrift::detail::si::InvocationType::AsyncTm};
};

class ChatRoomServiceSvNull : public ChatRoomServiceSvIf {
 public:
  void initialize() override;
  void getMessages(::example::chatroom::GetMessagesResponse& /*_return*/, std::unique_ptr<::example::chatroom::GetMessagesRequest> /*req*/) override;
  void sendMessage(std::unique_ptr<::example::chatroom::SendMessageRequest> /*req*/) override;
};

class ChatRoomServiceAsyncProcessor : public ::apache::thrift::GeneratedAsyncProcessor {
 public:
  const char* getServiceName() override;
  void getServiceMetadata(apache::thrift::metadata::ThriftServiceMetadataResponse& response) override;
  using BaseAsyncProcessor = void;
 protected:
  ChatRoomServiceSvIf* iface_;
 public:
  // This is implemented in case the corresponding AsyncProcessorFactory did not implement createMethodMetadata.
  // This can happen if the service is using a custom AsyncProcessorFactory but re-using the same AsyncProcessor.
  void processSerializedCompressedRequest(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedCompressedRequest&& serializedRequest, apache::thrift::protocol::PROTOCOL_TYPES protType, apache::thrift::Cpp2RequestContext* context, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm) override;
  // By default, this overload will be called for generated services
  void processSerializedCompressedRequestWithMetadata(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedCompressedRequest&& serializedRequest, const apache::thrift::AsyncProcessorFactory::MethodMetadata& methodMetadata, apache::thrift::protocol::PROTOCOL_TYPES protType, apache::thrift::Cpp2RequestContext* context, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm) override;
 public:
  using ProcessFuncs = GeneratedAsyncProcessor::ProcessFuncs<ChatRoomServiceAsyncProcessor>;
  using ProcessMap = GeneratedAsyncProcessor::ProcessMap<ProcessFuncs>;
  static const ChatRoomServiceAsyncProcessor::ProcessMap& getOwnProcessMap();
 private:
  static const ChatRoomServiceAsyncProcessor::ProcessMap kOwnProcessMap_;
 private:
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_initialize(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedCompressedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_initialize(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedCompressedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::SerializedResponse return_initialize(apache::thrift::ContextStack* ctx);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_initialize(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_getMessages(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedCompressedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_getMessages(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedCompressedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::SerializedResponse return_getMessages(apache::thrift::ContextStack* ctx, ::example::chatroom::GetMessagesResponse const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_getMessages(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void setUpAndProcess_sendMessage(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedCompressedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_sendMessage(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedCompressedRequest&& serializedRequest, apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static apache::thrift::SerializedResponse return_sendMessage(apache::thrift::ContextStack* ctx);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_sendMessage(apache::thrift::ResponseChannelRequest::UniquePtr req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
 public:
  ChatRoomServiceAsyncProcessor(ChatRoomServiceSvIf* iface) :
      iface_(iface) {}
  ~ChatRoomServiceAsyncProcessor() override {}
};

}} // example::chatroom
