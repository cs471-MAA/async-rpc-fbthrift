/**
 * Autogenerated by Thrift for /home/adrien/Documents/epfl/MA/cs-471/project/dep/if/chatroom.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#pragma once

#include <thrift/lib/cpp2/visitation/visit_by_thrift_field_metadata.h>
#include "if/gen-cpp2/chatroom_metadata.h"

namespace apache {
namespace thrift {
namespace detail {

template <>
struct VisitByFieldId<::example::chatroom::Message> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, int32_t fieldId, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).message_ref());
    case 2:
      return f(1, static_cast<T&&>(t).sender_ref());
    case 3:
      return f(2, static_cast<T&&>(t).timestamp_ref());
    default:
      throwInvalidThriftId(fieldId, "::example::chatroom::Message");
    }
  }
};

template <>
struct VisitByFieldId<::example::chatroom::IndexToken> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, int32_t fieldId, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).index_ref());
    default:
      throwInvalidThriftId(fieldId, "::example::chatroom::IndexToken");
    }
  }
};

template <>
struct VisitByFieldId<::example::chatroom::GetMessagesRequest> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, int32_t fieldId, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).token_ref());
    default:
      throwInvalidThriftId(fieldId, "::example::chatroom::GetMessagesRequest");
    }
  }
};

template <>
struct VisitByFieldId<::example::chatroom::GetMessagesResponse> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, int32_t fieldId, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).messages_ref());
    case 2:
      return f(1, static_cast<T&&>(t).token_ref());
    default:
      throwInvalidThriftId(fieldId, "::example::chatroom::GetMessagesResponse");
    }
  }
};

template <>
struct VisitByFieldId<::example::chatroom::SendMessageRequest> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, int32_t fieldId, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).message_ref());
    case 2:
      return f(1, static_cast<T&&>(t).sender_ref());
    default:
      throwInvalidThriftId(fieldId, "::example::chatroom::SendMessageRequest");
    }
  }
};

template <>
struct VisitByFieldId<::example::chatroom::Exception> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, int32_t fieldId, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).message_ref());
    default:
      throwInvalidThriftId(fieldId, "::example::chatroom::Exception");
    }
  }
};
} // namespace detail
} // namespace thrift
} // namespace apache
