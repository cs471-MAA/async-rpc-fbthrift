/**
 * Autogenerated by Thrift for /home/adrien/Documents/epfl/MA/cs-471/project/dep/if/chatroom.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#pragma once

#include "if/gen-cpp2/chatroom_metadata.h"
#include <thrift/lib/cpp2/visitation/for_each.h>

namespace apache {
namespace thrift {
namespace detail {

template <>
struct ForEachField<::example::chatroom::Message> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).message_ref()...);
    f(1, static_cast<T&&>(t).sender_ref()...);
    f(2, static_cast<T&&>(t).timestamp_ref()...);
  }
};

template <>
struct ForEachField<::example::chatroom::IndexToken> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).index_ref()...);
  }
};

template <>
struct ForEachField<::example::chatroom::GetMessagesRequest> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).token_ref()...);
  }
};

template <>
struct ForEachField<::example::chatroom::GetMessagesResponse> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).messages_ref()...);
    f(1, static_cast<T&&>(t).token_ref()...);
  }
};

template <>
struct ForEachField<::example::chatroom::SendMessageRequest> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).message_ref()...);
    f(1, static_cast<T&&>(t).sender_ref()...);
  }
};

template <>
struct ForEachField<::example::chatroom::Exception> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).message_ref()...);
  }
};
} // namespace detail
} // namespace thrift
} // namespace apache
