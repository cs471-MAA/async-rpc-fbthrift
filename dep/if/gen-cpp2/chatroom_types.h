/**
 * Autogenerated by Thrift for /home/adrien/Documents/epfl/MA/cs-471/project/dep/if/chatroom.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#pragma once

#include <thrift/lib/cpp2/gen/module_types_h.h>



namespace apache {
namespace thrift {
namespace tag {
struct message;
struct sender;
struct timestamp;
struct index;
struct token;
struct messages;
struct token;
struct message;
struct sender;
struct message;
} // namespace tag
namespace detail {
#ifndef APACHE_THRIFT_ACCESSOR_message
#define APACHE_THRIFT_ACCESSOR_message
APACHE_THRIFT_DEFINE_ACCESSOR(message);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_sender
#define APACHE_THRIFT_ACCESSOR_sender
APACHE_THRIFT_DEFINE_ACCESSOR(sender);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_timestamp
#define APACHE_THRIFT_ACCESSOR_timestamp
APACHE_THRIFT_DEFINE_ACCESSOR(timestamp);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_index
#define APACHE_THRIFT_ACCESSOR_index
APACHE_THRIFT_DEFINE_ACCESSOR(index);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_token
#define APACHE_THRIFT_ACCESSOR_token
APACHE_THRIFT_DEFINE_ACCESSOR(token);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_messages
#define APACHE_THRIFT_ACCESSOR_messages
APACHE_THRIFT_DEFINE_ACCESSOR(messages);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_token
#define APACHE_THRIFT_ACCESSOR_token
APACHE_THRIFT_DEFINE_ACCESSOR(token);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_message
#define APACHE_THRIFT_ACCESSOR_message
APACHE_THRIFT_DEFINE_ACCESSOR(message);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_sender
#define APACHE_THRIFT_ACCESSOR_sender
APACHE_THRIFT_DEFINE_ACCESSOR(sender);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_message
#define APACHE_THRIFT_ACCESSOR_message
APACHE_THRIFT_DEFINE_ACCESSOR(message);
#endif
} // namespace detail
} // namespace thrift
} // namespace apache

// BEGIN declare_enums

// END declare_enums
// BEGIN forward_declare
namespace example { namespace chatroom {
class Message;
class IndexToken;
class GetMessagesRequest;
class GetMessagesResponse;
class SendMessageRequest;
class Exception;
}} // example::chatroom
// END forward_declare
// BEGIN typedefs

// END typedefs
// BEGIN hash_and_equal_to
// END hash_and_equal_to
namespace example { namespace chatroom {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;
}} // example::chatroom
namespace example { namespace chatroom {
class Message final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;

 public:
  using __fbthrift_cpp2_type = Message;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  Message() :
      __fbthrift_field_timestamp() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  Message(apache::thrift::FragileConstructor, ::std::string message__arg, ::std::string sender__arg, ::std::int64_t timestamp__arg);

  Message(Message&&) noexcept;

  Message(const Message& src);


  Message& operator=(Message&&) noexcept;
  Message& operator=(const Message& src);
  void __clear();
 private:
  ::std::string __fbthrift_field_message;
 private:
  ::std::string __fbthrift_field_sender;
 private:
  ::std::int64_t __fbthrift_field_timestamp;
 private:
  apache::thrift::detail::isset_bitset<3, false> __isset;

 public:

  bool operator==(const Message&) const;
  bool operator<(const Message&) const;

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> message_ref() const& {
    return {this->__fbthrift_field_message, __isset.at(folly::index_constant<0>()), __isset.bit(folly::index_constant<0>())};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> message_ref() const&& {
    return {std::move(this->__fbthrift_field_message), __isset.at(folly::index_constant<0>()), __isset.bit(folly::index_constant<0>())};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> message_ref() & {
    return {this->__fbthrift_field_message, __isset.at(folly::index_constant<0>()), __isset.bit(folly::index_constant<0>())};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> message_ref() && {
    return {std::move(this->__fbthrift_field_message), __isset.at(folly::index_constant<0>()), __isset.bit(folly::index_constant<0>())};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> message() & {
    return message_ref();
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> message() const& {
    return message_ref();
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> message() && {
    return std::move(*this).message_ref();
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> message() const&& {
    return std::move(*this).message_ref();
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> sender_ref() const& {
    return {this->__fbthrift_field_sender, __isset.at(folly::index_constant<1>()), __isset.bit(folly::index_constant<1>())};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> sender_ref() const&& {
    return {std::move(this->__fbthrift_field_sender), __isset.at(folly::index_constant<1>()), __isset.bit(folly::index_constant<1>())};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> sender_ref() & {
    return {this->__fbthrift_field_sender, __isset.at(folly::index_constant<1>()), __isset.bit(folly::index_constant<1>())};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> sender_ref() && {
    return {std::move(this->__fbthrift_field_sender), __isset.at(folly::index_constant<1>()), __isset.bit(folly::index_constant<1>())};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> sender() & {
    return sender_ref();
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> sender() const& {
    return sender_ref();
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> sender() && {
    return std::move(*this).sender_ref();
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> sender() const&& {
    return std::move(*this).sender_ref();
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> timestamp_ref() const& {
    return {this->__fbthrift_field_timestamp, __isset.at(folly::index_constant<2>()), __isset.bit(folly::index_constant<2>())};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> timestamp_ref() const&& {
    return {std::move(this->__fbthrift_field_timestamp), __isset.at(folly::index_constant<2>()), __isset.bit(folly::index_constant<2>())};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> timestamp_ref() & {
    return {this->__fbthrift_field_timestamp, __isset.at(folly::index_constant<2>()), __isset.bit(folly::index_constant<2>())};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> timestamp_ref() && {
    return {std::move(this->__fbthrift_field_timestamp), __isset.at(folly::index_constant<2>()), __isset.bit(folly::index_constant<2>())};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> timestamp() & {
    return timestamp_ref();
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> timestamp() const& {
    return timestamp_ref();
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> timestamp() && {
    return std::move(*this).timestamp_ref();
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> timestamp() const&& {
    return std::move(*this).timestamp_ref();
  }

  const ::std::string& get_message() const& {
    return __fbthrift_field_message;
  }

  ::std::string get_message() && {
    return std::move(__fbthrift_field_message);
  }

  template <typename T_Message_message_struct_setter = ::std::string>
  [[deprecated("Use `FOO.message_ref() = BAR;` instead of `FOO.set_message(BAR);`")]]
  ::std::string& set_message(T_Message_message_struct_setter&& message_) {
    message_ref() = std::forward<T_Message_message_struct_setter>(message_);
    return __fbthrift_field_message;
  }

  const ::std::string& get_sender() const& {
    return __fbthrift_field_sender;
  }

  ::std::string get_sender() && {
    return std::move(__fbthrift_field_sender);
  }

  template <typename T_Message_sender_struct_setter = ::std::string>
  [[deprecated("Use `FOO.sender_ref() = BAR;` instead of `FOO.set_sender(BAR);`")]]
  ::std::string& set_sender(T_Message_sender_struct_setter&& sender_) {
    sender_ref() = std::forward<T_Message_sender_struct_setter>(sender_);
    return __fbthrift_field_sender;
  }

  ::std::int64_t get_timestamp() const {
    return __fbthrift_field_timestamp;
  }

  [[deprecated("Use `FOO.timestamp_ref() = BAR;` instead of `FOO.set_timestamp(BAR);`")]]
  ::std::int64_t& set_timestamp(::std::int64_t timestamp_) {
    timestamp_ref() = timestamp_;
    return __fbthrift_field_timestamp;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<Message>;
  friend void swap(Message& a, Message& b);
};

template <class Protocol_>
uint32_t Message::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}} // example::chatroom
namespace example { namespace chatroom {
class IndexToken final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;

 public:
  using __fbthrift_cpp2_type = IndexToken;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  IndexToken() :
      __fbthrift_field_index() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  IndexToken(apache::thrift::FragileConstructor, ::std::int64_t index__arg);

  IndexToken(IndexToken&&) = default;

  IndexToken(const IndexToken&) = default;


  IndexToken& operator=(IndexToken&&) = default;

  IndexToken& operator=(const IndexToken&) = default;
  void __clear();
 private:
  ::std::int64_t __fbthrift_field_index;
 private:
  apache::thrift::detail::isset_bitset<1, false> __isset;

 public:

  bool operator==(const IndexToken&) const;
  bool operator<(const IndexToken&) const;

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> index_ref() const& {
    return {this->__fbthrift_field_index, __isset.at(folly::index_constant<0>()), __isset.bit(folly::index_constant<0>())};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> index_ref() const&& {
    return {std::move(this->__fbthrift_field_index), __isset.at(folly::index_constant<0>()), __isset.bit(folly::index_constant<0>())};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> index_ref() & {
    return {this->__fbthrift_field_index, __isset.at(folly::index_constant<0>()), __isset.bit(folly::index_constant<0>())};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> index_ref() && {
    return {std::move(this->__fbthrift_field_index), __isset.at(folly::index_constant<0>()), __isset.bit(folly::index_constant<0>())};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> index() & {
    return index_ref();
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> index() const& {
    return index_ref();
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> index() && {
    return std::move(*this).index_ref();
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> index() const&& {
    return std::move(*this).index_ref();
  }

  ::std::int64_t get_index() const {
    return __fbthrift_field_index;
  }

  [[deprecated("Use `FOO.index_ref() = BAR;` instead of `FOO.set_index(BAR);`")]]
  ::std::int64_t& set_index(::std::int64_t index_) {
    index_ref() = index_;
    return __fbthrift_field_index;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<IndexToken>;
  friend void swap(IndexToken& a, IndexToken& b);
};

template <class Protocol_>
uint32_t IndexToken::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}} // example::chatroom
namespace example { namespace chatroom {
class GetMessagesRequest final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;

 public:
  using __fbthrift_cpp2_type = GetMessagesRequest;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  GetMessagesRequest() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  GetMessagesRequest(apache::thrift::FragileConstructor, ::example::chatroom::IndexToken token__arg);

  GetMessagesRequest(GetMessagesRequest&&) = default;

  GetMessagesRequest(const GetMessagesRequest&) = default;


  GetMessagesRequest& operator=(GetMessagesRequest&&) = default;

  GetMessagesRequest& operator=(const GetMessagesRequest&) = default;
  void __clear();
 private:
  ::example::chatroom::IndexToken __fbthrift_field_token;
 private:
  apache::thrift::detail::isset_bitset<1, false> __isset;

 public:

  bool operator==(const GetMessagesRequest&) const;
  bool operator<(const GetMessagesRequest&) const;

  template <typename..., typename T = ::example::chatroom::IndexToken>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> token_ref() const& {
    return {this->__fbthrift_field_token, __isset.at(folly::index_constant<0>()), __isset.bit(folly::index_constant<0>())};
  }

  template <typename..., typename T = ::example::chatroom::IndexToken>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> token_ref() const&& {
    return {std::move(this->__fbthrift_field_token), __isset.at(folly::index_constant<0>()), __isset.bit(folly::index_constant<0>())};
  }

  template <typename..., typename T = ::example::chatroom::IndexToken>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> token_ref() & {
    return {this->__fbthrift_field_token, __isset.at(folly::index_constant<0>()), __isset.bit(folly::index_constant<0>())};
  }

  template <typename..., typename T = ::example::chatroom::IndexToken>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> token_ref() && {
    return {std::move(this->__fbthrift_field_token), __isset.at(folly::index_constant<0>()), __isset.bit(folly::index_constant<0>())};
  }

  template <typename..., typename T = ::example::chatroom::IndexToken>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> token() & {
    return token_ref();
  }

  template <typename..., typename T = ::example::chatroom::IndexToken>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> token() const& {
    return token_ref();
  }

  template <typename..., typename T = ::example::chatroom::IndexToken>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> token() && {
    return std::move(*this).token_ref();
  }

  template <typename..., typename T = ::example::chatroom::IndexToken>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> token() const&& {
    return std::move(*this).token_ref();
  }
  const ::example::chatroom::IndexToken* get_token() const&;
  ::example::chatroom::IndexToken* get_token() &;
  ::example::chatroom::IndexToken* get_token() && = delete;

  template <typename T_GetMessagesRequest_token_struct_setter = ::example::chatroom::IndexToken>
  [[deprecated("Use `FOO.token_ref() = BAR;` instead of `FOO.set_token(BAR);`")]]
  ::example::chatroom::IndexToken& set_token(T_GetMessagesRequest_token_struct_setter&& token_) {
    token_ref() = std::forward<T_GetMessagesRequest_token_struct_setter>(token_);
    return __fbthrift_field_token;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<GetMessagesRequest>;
  friend void swap(GetMessagesRequest& a, GetMessagesRequest& b);
};

template <class Protocol_>
uint32_t GetMessagesRequest::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}} // example::chatroom
namespace example { namespace chatroom {
class GetMessagesResponse final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;

 public:
  using __fbthrift_cpp2_type = GetMessagesResponse;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  GetMessagesResponse() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  GetMessagesResponse(apache::thrift::FragileConstructor, ::std::vector<::example::chatroom::Message> messages__arg, ::example::chatroom::IndexToken token__arg);

  GetMessagesResponse(GetMessagesResponse&&) noexcept;

  GetMessagesResponse(const GetMessagesResponse& src);


  GetMessagesResponse& operator=(GetMessagesResponse&&) noexcept;
  GetMessagesResponse& operator=(const GetMessagesResponse& src);
  void __clear();
 private:
  ::std::vector<::example::chatroom::Message> __fbthrift_field_messages;
 private:
  ::example::chatroom::IndexToken __fbthrift_field_token;
 private:
  apache::thrift::detail::isset_bitset<2, false> __isset;

 public:

  bool operator==(const GetMessagesResponse&) const;
  bool operator<(const GetMessagesResponse&) const;

  template <typename..., typename T = ::std::vector<::example::chatroom::Message>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> messages_ref() const& {
    return {this->__fbthrift_field_messages, __isset.at(folly::index_constant<0>()), __isset.bit(folly::index_constant<0>())};
  }

  template <typename..., typename T = ::std::vector<::example::chatroom::Message>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> messages_ref() const&& {
    return {std::move(this->__fbthrift_field_messages), __isset.at(folly::index_constant<0>()), __isset.bit(folly::index_constant<0>())};
  }

  template <typename..., typename T = ::std::vector<::example::chatroom::Message>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> messages_ref() & {
    return {this->__fbthrift_field_messages, __isset.at(folly::index_constant<0>()), __isset.bit(folly::index_constant<0>())};
  }

  template <typename..., typename T = ::std::vector<::example::chatroom::Message>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> messages_ref() && {
    return {std::move(this->__fbthrift_field_messages), __isset.at(folly::index_constant<0>()), __isset.bit(folly::index_constant<0>())};
  }

  template <typename..., typename T = ::std::vector<::example::chatroom::Message>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> messages() & {
    return messages_ref();
  }

  template <typename..., typename T = ::std::vector<::example::chatroom::Message>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> messages() const& {
    return messages_ref();
  }

  template <typename..., typename T = ::std::vector<::example::chatroom::Message>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> messages() && {
    return std::move(*this).messages_ref();
  }

  template <typename..., typename T = ::std::vector<::example::chatroom::Message>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> messages() const&& {
    return std::move(*this).messages_ref();
  }

  template <typename..., typename T = ::example::chatroom::IndexToken>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> token_ref() const& {
    return {this->__fbthrift_field_token, __isset.at(folly::index_constant<1>()), __isset.bit(folly::index_constant<1>())};
  }

  template <typename..., typename T = ::example::chatroom::IndexToken>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> token_ref() const&& {
    return {std::move(this->__fbthrift_field_token), __isset.at(folly::index_constant<1>()), __isset.bit(folly::index_constant<1>())};
  }

  template <typename..., typename T = ::example::chatroom::IndexToken>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> token_ref() & {
    return {this->__fbthrift_field_token, __isset.at(folly::index_constant<1>()), __isset.bit(folly::index_constant<1>())};
  }

  template <typename..., typename T = ::example::chatroom::IndexToken>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> token_ref() && {
    return {std::move(this->__fbthrift_field_token), __isset.at(folly::index_constant<1>()), __isset.bit(folly::index_constant<1>())};
  }

  template <typename..., typename T = ::example::chatroom::IndexToken>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> token() & {
    return token_ref();
  }

  template <typename..., typename T = ::example::chatroom::IndexToken>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> token() const& {
    return token_ref();
  }

  template <typename..., typename T = ::example::chatroom::IndexToken>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> token() && {
    return std::move(*this).token_ref();
  }

  template <typename..., typename T = ::example::chatroom::IndexToken>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> token() const&& {
    return std::move(*this).token_ref();
  }
  const ::std::vector<::example::chatroom::Message>& get_messages() const&;
  ::std::vector<::example::chatroom::Message> get_messages() &&;

  template <typename T_GetMessagesResponse_messages_struct_setter = ::std::vector<::example::chatroom::Message>>
  [[deprecated("Use `FOO.messages_ref() = BAR;` instead of `FOO.set_messages(BAR);`")]]
  ::std::vector<::example::chatroom::Message>& set_messages(T_GetMessagesResponse_messages_struct_setter&& messages_) {
    messages_ref() = std::forward<T_GetMessagesResponse_messages_struct_setter>(messages_);
    return __fbthrift_field_messages;
  }
  const ::example::chatroom::IndexToken& get_token() const&;
  ::example::chatroom::IndexToken get_token() &&;

  template <typename T_GetMessagesResponse_token_struct_setter = ::example::chatroom::IndexToken>
  [[deprecated("Use `FOO.token_ref() = BAR;` instead of `FOO.set_token(BAR);`")]]
  ::example::chatroom::IndexToken& set_token(T_GetMessagesResponse_token_struct_setter&& token_) {
    token_ref() = std::forward<T_GetMessagesResponse_token_struct_setter>(token_);
    return __fbthrift_field_token;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<GetMessagesResponse>;
  friend void swap(GetMessagesResponse& a, GetMessagesResponse& b);
};

template <class Protocol_>
uint32_t GetMessagesResponse::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}} // example::chatroom
namespace example { namespace chatroom {
class SendMessageRequest final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;

 public:
  using __fbthrift_cpp2_type = SendMessageRequest;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  SendMessageRequest() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  SendMessageRequest(apache::thrift::FragileConstructor, ::std::string message__arg, ::std::string sender__arg);

  SendMessageRequest(SendMessageRequest&&) noexcept;

  SendMessageRequest(const SendMessageRequest& src);


  SendMessageRequest& operator=(SendMessageRequest&&) noexcept;
  SendMessageRequest& operator=(const SendMessageRequest& src);
  void __clear();
 private:
  ::std::string __fbthrift_field_message;
 private:
  ::std::string __fbthrift_field_sender;
 private:
  apache::thrift::detail::isset_bitset<2, false> __isset;

 public:

  bool operator==(const SendMessageRequest&) const;
  bool operator<(const SendMessageRequest&) const;

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> message_ref() const& {
    return {this->__fbthrift_field_message, __isset.at(folly::index_constant<0>()), __isset.bit(folly::index_constant<0>())};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> message_ref() const&& {
    return {std::move(this->__fbthrift_field_message), __isset.at(folly::index_constant<0>()), __isset.bit(folly::index_constant<0>())};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> message_ref() & {
    return {this->__fbthrift_field_message, __isset.at(folly::index_constant<0>()), __isset.bit(folly::index_constant<0>())};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> message_ref() && {
    return {std::move(this->__fbthrift_field_message), __isset.at(folly::index_constant<0>()), __isset.bit(folly::index_constant<0>())};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> message() & {
    return message_ref();
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> message() const& {
    return message_ref();
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> message() && {
    return std::move(*this).message_ref();
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> message() const&& {
    return std::move(*this).message_ref();
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> sender_ref() const& {
    return {this->__fbthrift_field_sender, __isset.at(folly::index_constant<1>()), __isset.bit(folly::index_constant<1>())};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> sender_ref() const&& {
    return {std::move(this->__fbthrift_field_sender), __isset.at(folly::index_constant<1>()), __isset.bit(folly::index_constant<1>())};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> sender_ref() & {
    return {this->__fbthrift_field_sender, __isset.at(folly::index_constant<1>()), __isset.bit(folly::index_constant<1>())};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> sender_ref() && {
    return {std::move(this->__fbthrift_field_sender), __isset.at(folly::index_constant<1>()), __isset.bit(folly::index_constant<1>())};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> sender() & {
    return sender_ref();
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> sender() const& {
    return sender_ref();
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> sender() && {
    return std::move(*this).sender_ref();
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> sender() const&& {
    return std::move(*this).sender_ref();
  }

  const ::std::string& get_message() const& {
    return __fbthrift_field_message;
  }

  ::std::string get_message() && {
    return std::move(__fbthrift_field_message);
  }

  template <typename T_SendMessageRequest_message_struct_setter = ::std::string>
  [[deprecated("Use `FOO.message_ref() = BAR;` instead of `FOO.set_message(BAR);`")]]
  ::std::string& set_message(T_SendMessageRequest_message_struct_setter&& message_) {
    message_ref() = std::forward<T_SendMessageRequest_message_struct_setter>(message_);
    return __fbthrift_field_message;
  }

  const ::std::string& get_sender() const& {
    return __fbthrift_field_sender;
  }

  ::std::string get_sender() && {
    return std::move(__fbthrift_field_sender);
  }

  template <typename T_SendMessageRequest_sender_struct_setter = ::std::string>
  [[deprecated("Use `FOO.sender_ref() = BAR;` instead of `FOO.set_sender(BAR);`")]]
  ::std::string& set_sender(T_SendMessageRequest_sender_struct_setter&& sender_) {
    sender_ref() = std::forward<T_SendMessageRequest_sender_struct_setter>(sender_);
    return __fbthrift_field_sender;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<SendMessageRequest>;
  friend void swap(SendMessageRequest& a, SendMessageRequest& b);
};

template <class Protocol_>
uint32_t SendMessageRequest::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}} // example::chatroom
namespace example { namespace chatroom {
class FOLLY_EXPORT Exception : public apache::thrift::TException {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;
  static constexpr ::apache::thrift::ExceptionKind __fbthrift_cpp2_gen_exception_kind =
         ::apache::thrift::ExceptionKind::UNSPECIFIED;
  static constexpr ::apache::thrift::ExceptionSafety __fbthrift_cpp2_gen_exception_safety =
         ::apache::thrift::ExceptionSafety::UNSPECIFIED;
  static constexpr ::apache::thrift::ExceptionBlame __fbthrift_cpp2_gen_exception_blame =
         ::apache::thrift::ExceptionBlame::UNSPECIFIED;

 public:
  using __fbthrift_cpp2_type = Exception;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  Exception();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  Exception(apache::thrift::FragileConstructor, ::std::string message__arg);

  Exception(Exception&&) noexcept;

  Exception(const Exception& src);


  Exception& operator=(Exception&&) noexcept;
  Exception& operator=(const Exception& src);
  void __clear();

  ~Exception() override;

 private:
  ::std::string message;
 private:
  apache::thrift::detail::isset_bitset<1, false> __isset;

 public:

  bool operator==(const Exception&) const;
  bool operator<(const Exception&) const;

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> message_ref() const& {
    return {this->message, __isset.at(folly::index_constant<0>()), __isset.bit(folly::index_constant<0>())};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> message_ref() const&& {
    return {std::move(this->message), __isset.at(folly::index_constant<0>()), __isset.bit(folly::index_constant<0>())};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> message_ref() & {
    return {this->message, __isset.at(folly::index_constant<0>()), __isset.bit(folly::index_constant<0>())};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> message_ref() && {
    return {std::move(this->message), __isset.at(folly::index_constant<0>()), __isset.bit(folly::index_constant<0>())};
  }

  const ::std::string& get_message() const& {
    return message;
  }

  ::std::string get_message() && {
    return std::move(message);
  }

  template <typename T_Exception_message_struct_setter = ::std::string>
  [[deprecated("Use `FOO.message_ref() = BAR;` instead of `FOO.set_message(BAR);`")]]
  ::std::string& set_message(T_Exception_message_struct_setter&& message_) {
    message_ref() = std::forward<T_Exception_message_struct_setter>(message_);
    return message;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

  const char* what() const noexcept override {
    return "::example::chatroom::Exception";
  }

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<Exception>;
  friend void swap(Exception& a, Exception& b);
};

template <class Protocol_>
uint32_t Exception::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}} // example::chatroom
