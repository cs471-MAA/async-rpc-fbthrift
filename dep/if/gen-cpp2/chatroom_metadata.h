/**
 * Autogenerated by Thrift for /home/adrien/Documents/epfl/MA/cs-471/project/dep/if/chatroom.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#pragma once

#include <vector>

#include <thrift/lib/cpp2/gen/module_metadata_h.h>
#include "if/gen-cpp2/chatroom_types.h"

namespace example {
namespace chatroom {
class ChatRoomServiceSvIf;
}} // namespace example::chatroom
namespace example {
namespace chatroom {
class EchoSvIf;
}} // namespace example::chatroom

namespace apache {
namespace thrift {
namespace detail {
namespace md {

template <>
class StructMetadata<::example::chatroom::Message> {
 public:
  static const ::apache::thrift::metadata::ThriftStruct& gen(ThriftMetadata& metadata);
};
template <>
class StructMetadata<::example::chatroom::IndexToken> {
 public:
  static const ::apache::thrift::metadata::ThriftStruct& gen(ThriftMetadata& metadata);
};
template <>
class StructMetadata<::example::chatroom::GetMessagesRequest> {
 public:
  static const ::apache::thrift::metadata::ThriftStruct& gen(ThriftMetadata& metadata);
};
template <>
class StructMetadata<::example::chatroom::GetMessagesResponse> {
 public:
  static const ::apache::thrift::metadata::ThriftStruct& gen(ThriftMetadata& metadata);
};
template <>
class StructMetadata<::example::chatroom::SendMessageRequest> {
 public:
  static const ::apache::thrift::metadata::ThriftStruct& gen(ThriftMetadata& metadata);
};
template <>
class StructMetadata<::example::chatroom::Exception> {
 public:
  static const ::apache::thrift::metadata::ThriftStruct& gen(ThriftMetadata& metadata);
};
template <>
class ExceptionMetadata<::example::chatroom::Exception> {
 public:
  static void gen(ThriftMetadata& metadata);
};
template <>
class ServiceMetadata<::example::chatroom::ChatRoomServiceSvIf> {
 public:
  static void gen(ThriftServiceMetadataResponse& response);
 private:
  static const ThriftServiceContextRef* genRecurse(ThriftMetadata& metadata, std::vector<ThriftServiceContextRef>& services);

  template <typename T>
  friend class ServiceMetadata;

  static void gen_initialize(ThriftMetadata& metadata, ThriftService& context);
  static void gen_getMessages(ThriftMetadata& metadata, ThriftService& context);
  static void gen_sendMessage(ThriftMetadata& metadata, ThriftService& context);
};
template <>
class ServiceMetadata<::example::chatroom::EchoSvIf> {
 public:
  static void gen(ThriftServiceMetadataResponse& response);
 private:
  static const ThriftServiceContextRef* genRecurse(ThriftMetadata& metadata, std::vector<ThriftServiceContextRef>& services);

  template <typename T>
  friend class ServiceMetadata;

  static void gen_echo(ThriftMetadata& metadata, ThriftService& context);
};
} // namespace md
} // namespace detail
} // namespace thrift
} // namespace apache
