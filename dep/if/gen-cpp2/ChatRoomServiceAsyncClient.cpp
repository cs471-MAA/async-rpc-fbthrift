/**
 * Autogenerated by Thrift for /home/adrien/Documents/epfl/MA/cs-471/project/dep/if/chatroom.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */

#include "if/gen-cpp2/ChatRoomServiceAsyncClient.h"

#include <thrift/lib/cpp2/gen/client_cpp.h>

namespace example { namespace chatroom {
typedef apache::thrift::ThriftPresult<false> ChatRoomService_initialize_pargs;
typedef apache::thrift::ThriftPresult<true, apache::thrift::FieldData<1, ::apache::thrift::type_class::structure, ::example::chatroom::Exception>> ChatRoomService_initialize_presult;
typedef apache::thrift::ThriftPresult<false, apache::thrift::FieldData<1, ::apache::thrift::type_class::structure, ::example::chatroom::GetMessagesRequest*>> ChatRoomService_getMessages_pargs;
typedef apache::thrift::ThriftPresult<true, apache::thrift::FieldData<0, ::apache::thrift::type_class::structure, ::example::chatroom::GetMessagesResponse*>, apache::thrift::FieldData<1, ::apache::thrift::type_class::structure, ::example::chatroom::Exception>> ChatRoomService_getMessages_presult;
typedef apache::thrift::ThriftPresult<false, apache::thrift::FieldData<1, ::apache::thrift::type_class::structure, ::example::chatroom::SendMessageRequest*>> ChatRoomService_sendMessage_pargs;
typedef apache::thrift::ThriftPresult<true, apache::thrift::FieldData<1, ::apache::thrift::type_class::structure, ::example::chatroom::Exception>> ChatRoomService_sendMessage_presult;

template <typename Protocol_, typename RpcOptions>
void ChatRoomServiceAsyncClient::initializeT(Protocol_* prot, RpcOptions&& rpcOptions, std::shared_ptr<apache::thrift::transport::THeader> header, apache::thrift::ContextStack* contextStack, apache::thrift::RequestClientCallback::Ptr callback) {

  ChatRoomService_initialize_pargs args;
  auto sizer = [&](Protocol_* p) { return args.serializedSizeZC(p); };
  auto writer = [&](Protocol_* p) { args.write(p); };

  static ::apache::thrift::MethodMetadata::Data* methodMetadata =
        new ::apache::thrift::MethodMetadata::Data(
                "initialize",
                ::apache::thrift::FunctionQualifier::Unspecified);
  apache::thrift::clientSendT<apache::thrift::RpcKind::SINGLE_REQUEST_SINGLE_RESPONSE, Protocol_>(prot, std::forward<RpcOptions>(rpcOptions), std::move(callback), contextStack, std::move(header), channel_.get(), ::apache::thrift::MethodMetadata::from_static(methodMetadata), writer, sizer);
}

template <typename Protocol_, typename RpcOptions>
void ChatRoomServiceAsyncClient::getMessagesT(Protocol_* prot, RpcOptions&& rpcOptions, std::shared_ptr<apache::thrift::transport::THeader> header, apache::thrift::ContextStack* contextStack, apache::thrift::RequestClientCallback::Ptr callback, const ::example::chatroom::GetMessagesRequest& p_req) {

  ChatRoomService_getMessages_pargs args;
  args.get<0>().value = const_cast<::example::chatroom::GetMessagesRequest*>(&p_req);
  auto sizer = [&](Protocol_* p) { return args.serializedSizeZC(p); };
  auto writer = [&](Protocol_* p) { args.write(p); };

  static ::apache::thrift::MethodMetadata::Data* methodMetadata =
        new ::apache::thrift::MethodMetadata::Data(
                "getMessages",
                ::apache::thrift::FunctionQualifier::Unspecified);
  apache::thrift::clientSendT<apache::thrift::RpcKind::SINGLE_REQUEST_SINGLE_RESPONSE, Protocol_>(prot, std::forward<RpcOptions>(rpcOptions), std::move(callback), contextStack, std::move(header), channel_.get(), ::apache::thrift::MethodMetadata::from_static(methodMetadata), writer, sizer);
}

template <typename Protocol_, typename RpcOptions>
void ChatRoomServiceAsyncClient::sendMessageT(Protocol_* prot, RpcOptions&& rpcOptions, std::shared_ptr<apache::thrift::transport::THeader> header, apache::thrift::ContextStack* contextStack, apache::thrift::RequestClientCallback::Ptr callback, const ::example::chatroom::SendMessageRequest& p_req) {

  ChatRoomService_sendMessage_pargs args;
  args.get<0>().value = const_cast<::example::chatroom::SendMessageRequest*>(&p_req);
  auto sizer = [&](Protocol_* p) { return args.serializedSizeZC(p); };
  auto writer = [&](Protocol_* p) { args.write(p); };

  static ::apache::thrift::MethodMetadata::Data* methodMetadata =
        new ::apache::thrift::MethodMetadata::Data(
                "sendMessage",
                ::apache::thrift::FunctionQualifier::Unspecified);
  apache::thrift::clientSendT<apache::thrift::RpcKind::SINGLE_REQUEST_SINGLE_RESPONSE, Protocol_>(prot, std::forward<RpcOptions>(rpcOptions), std::move(callback), contextStack, std::move(header), channel_.get(), ::apache::thrift::MethodMetadata::from_static(methodMetadata), writer, sizer);
}



void ChatRoomServiceAsyncClient::initialize(std::unique_ptr<apache::thrift::RequestCallback> callback) {
  ::apache::thrift::RpcOptions rpcOptions;
  initialize(rpcOptions, std::move(callback));
}

void ChatRoomServiceAsyncClient::initialize(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback) {
  auto [ctx, header] = initializeCtx(&rpcOptions);
  apache::thrift::RequestCallback::Context callbackContext;
  callbackContext.protocolId =
      apache::thrift::GeneratedAsyncClient::getChannel()->getProtocolId();
  auto* contextStack = ctx.get();
  if (callback) {
    callbackContext.ctx = std::move(ctx);
  }
  auto wrappedCallback = apache::thrift::toRequestClientCallbackPtr(std::move(callback), std::move(callbackContext));
  initializeImpl(rpcOptions, std::move(header), contextStack, std::move(wrappedCallback));
}

void ChatRoomServiceAsyncClient::initializeImpl(apache::thrift::RpcOptions& rpcOptions, std::shared_ptr<apache::thrift::transport::THeader> header, apache::thrift::ContextStack* contextStack, apache::thrift::RequestClientCallback::Ptr callback, bool stealRpcOptions) {
  switch (apache::thrift::GeneratedAsyncClient::getChannel()->getProtocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolWriter writer;
      if (stealRpcOptions) {
        initializeT(&writer, std::move(rpcOptions), std::move(header), contextStack, std::move(callback));
      } else {
        initializeT(&writer, rpcOptions, std::move(header), contextStack, std::move(callback));
      }
      break;
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolWriter writer;
      if (stealRpcOptions) {
        initializeT(&writer, std::move(rpcOptions), std::move(header), contextStack, std::move(callback));
      } else {
        initializeT(&writer, rpcOptions, std::move(header), contextStack, std::move(callback));
      }
      break;
    }
    default:
    {
      apache::thrift::detail::ac::throw_app_exn("Could not find Protocol");
    }
  }
}

std::pair<std::unique_ptr<::apache::thrift::ContextStack>, std::shared_ptr<::apache::thrift::transport::THeader>> ChatRoomServiceAsyncClient::initializeCtx(apache::thrift::RpcOptions* rpcOptions) {
  auto header = std::make_shared<apache::thrift::transport::THeader>(
      apache::thrift::transport::THeader::ALLOW_BIG_FRAMES);
  header->setProtocolId(channel_->getProtocolId());
  if (rpcOptions) {
    header->setHeaders(rpcOptions->releaseWriteHeaders());
  }

  auto ctx = apache::thrift::ContextStack::createWithClientContext(
      handlers_,
      getServiceName(),
      "ChatRoomService.initialize",
      *header);

  return {std::move(ctx), std::move(header)};
}

void ChatRoomServiceAsyncClient::sync_initialize() {
  ::apache::thrift::RpcOptions rpcOptions;
  sync_initialize(rpcOptions);
}

void ChatRoomServiceAsyncClient::sync_initialize(apache::thrift::RpcOptions& rpcOptions) {
  apache::thrift::ClientReceiveState returnState;
  apache::thrift::ClientSyncCallback<false> callback(&returnState);
  auto protocolId = apache::thrift::GeneratedAsyncClient::getChannel()->getProtocolId();
  auto evb = apache::thrift::GeneratedAsyncClient::getChannel()->getEventBase();
  auto ctxAndHeader = initializeCtx(&rpcOptions);
  auto wrappedCallback = apache::thrift::RequestClientCallback::Ptr(&callback);
  callback.waitUntilDone(
    evb,
    [&] {
      initializeImpl(rpcOptions, std::move(ctxAndHeader.second), ctxAndHeader.first.get(), std::move(wrappedCallback));
    });

  if (returnState.isException()) {
    returnState.exception().throw_exception();
  }
  returnState.resetProtocolId(protocolId);
  returnState.resetCtx(std::move(ctxAndHeader.first));
  SCOPE_EXIT {
    if (returnState.header() && !returnState.header()->getHeaders().empty()) {
      rpcOptions.setReadHeaders(returnState.header()->releaseHeaders());
    }
  };
  return folly::fibers::runInMainContext([&] {
      recv_initialize(returnState);
  });
}


folly::Future<folly::Unit> ChatRoomServiceAsyncClient::future_initialize() {
  ::apache::thrift::RpcOptions rpcOptions;
  return future_initialize(rpcOptions);
}

folly::SemiFuture<folly::Unit> ChatRoomServiceAsyncClient::semifuture_initialize() {
  ::apache::thrift::RpcOptions rpcOptions;
  return semifuture_initialize(rpcOptions);
}

folly::Future<folly::Unit> ChatRoomServiceAsyncClient::future_initialize(apache::thrift::RpcOptions& rpcOptions) {
  folly::Promise<folly::Unit> promise;
  auto future = promise.getFuture();
  auto callback = std::make_unique<apache::thrift::FutureCallback<folly::Unit>>(std::move(promise), recv_wrapped_initialize, channel_);
  initialize(rpcOptions, std::move(callback));
  return future;
}

folly::SemiFuture<folly::Unit> ChatRoomServiceAsyncClient::semifuture_initialize(apache::thrift::RpcOptions& rpcOptions) {
  auto callbackAndFuture = makeSemiFutureCallback(recv_wrapped_initialize, channel_);
  auto callback = std::move(callbackAndFuture.first);
  initialize(rpcOptions, std::move(callback));
  return std::move(callbackAndFuture.second);
}

folly::Future<std::pair<folly::Unit, std::unique_ptr<apache::thrift::transport::THeader>>> ChatRoomServiceAsyncClient::header_future_initialize(apache::thrift::RpcOptions& rpcOptions) {
  folly::Promise<std::pair<folly::Unit, std::unique_ptr<apache::thrift::transport::THeader>>> promise;
  auto future = promise.getFuture();
  auto callback = std::make_unique<apache::thrift::HeaderFutureCallback<folly::Unit>>(std::move(promise), recv_wrapped_initialize, channel_);
  initialize(rpcOptions, std::move(callback));
  return future;
}

folly::SemiFuture<std::pair<folly::Unit, std::unique_ptr<apache::thrift::transport::THeader>>> ChatRoomServiceAsyncClient::header_semifuture_initialize(apache::thrift::RpcOptions& rpcOptions) {
  auto callbackAndFuture = makeHeaderSemiFutureCallback(recv_wrapped_initialize, channel_);
  auto callback = std::move(callbackAndFuture.first);
  initialize(rpcOptions, std::move(callback));
  return std::move(callbackAndFuture.second);
}

void ChatRoomServiceAsyncClient::initialize(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback) {
  initialize(std::make_unique<apache::thrift::FunctionReplyCallback>(std::move(callback)));
}

#if FOLLY_HAS_COROUTINES
#endif // FOLLY_HAS_COROUTINES
folly::exception_wrapper ChatRoomServiceAsyncClient::recv_wrapped_initialize(::apache::thrift::ClientReceiveState& state) {
  if (state.isException()) {
    return std::move(state.exception());
  }
  if (!state.hasResponseBuffer()) {
    return folly::make_exception_wrapper<apache::thrift::TApplicationException>("recv_ called without result");
  }

  using result = ChatRoomService_initialize_presult;
  switch (state.protocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolReader reader;
      return apache::thrift::detail::ac::recv_wrapped<result>(
          &reader, state);
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolReader reader;
      return apache::thrift::detail::ac::recv_wrapped<result>(
          &reader, state);
    }
    default:
    {
    }
  }
  return folly::make_exception_wrapper<apache::thrift::TApplicationException>("Could not find Protocol");
}

void ChatRoomServiceAsyncClient::recv_initialize(::apache::thrift::ClientReceiveState& state) {
  auto ew = recv_wrapped_initialize(state);
  if (ew) {
    ew.throw_exception();
  }
}

void ChatRoomServiceAsyncClient::recv_instance_initialize(::apache::thrift::ClientReceiveState& state) {
  recv_initialize(state);
}

folly::exception_wrapper ChatRoomServiceAsyncClient::recv_instance_wrapped_initialize(::apache::thrift::ClientReceiveState& state) {
  return recv_wrapped_initialize(state);
}

void ChatRoomServiceAsyncClient::getMessages(std::unique_ptr<apache::thrift::RequestCallback> callback, const ::example::chatroom::GetMessagesRequest& p_req) {
  ::apache::thrift::RpcOptions rpcOptions;
  getMessages(rpcOptions, std::move(callback), p_req);
}

void ChatRoomServiceAsyncClient::getMessages(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const ::example::chatroom::GetMessagesRequest& p_req) {
  auto [ctx, header] = getMessagesCtx(&rpcOptions);
  apache::thrift::RequestCallback::Context callbackContext;
  callbackContext.protocolId =
      apache::thrift::GeneratedAsyncClient::getChannel()->getProtocolId();
  auto* contextStack = ctx.get();
  if (callback) {
    callbackContext.ctx = std::move(ctx);
  }
  auto wrappedCallback = apache::thrift::toRequestClientCallbackPtr(std::move(callback), std::move(callbackContext));
  getMessagesImpl(rpcOptions, std::move(header), contextStack, std::move(wrappedCallback), p_req);
}

void ChatRoomServiceAsyncClient::getMessagesImpl(apache::thrift::RpcOptions& rpcOptions, std::shared_ptr<apache::thrift::transport::THeader> header, apache::thrift::ContextStack* contextStack, apache::thrift::RequestClientCallback::Ptr callback, const ::example::chatroom::GetMessagesRequest& p_req, bool stealRpcOptions) {
  switch (apache::thrift::GeneratedAsyncClient::getChannel()->getProtocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolWriter writer;
      if (stealRpcOptions) {
        getMessagesT(&writer, std::move(rpcOptions), std::move(header), contextStack, std::move(callback), p_req);
      } else {
        getMessagesT(&writer, rpcOptions, std::move(header), contextStack, std::move(callback), p_req);
      }
      break;
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolWriter writer;
      if (stealRpcOptions) {
        getMessagesT(&writer, std::move(rpcOptions), std::move(header), contextStack, std::move(callback), p_req);
      } else {
        getMessagesT(&writer, rpcOptions, std::move(header), contextStack, std::move(callback), p_req);
      }
      break;
    }
    default:
    {
      apache::thrift::detail::ac::throw_app_exn("Could not find Protocol");
    }
  }
}

std::pair<std::unique_ptr<::apache::thrift::ContextStack>, std::shared_ptr<::apache::thrift::transport::THeader>> ChatRoomServiceAsyncClient::getMessagesCtx(apache::thrift::RpcOptions* rpcOptions) {
  auto header = std::make_shared<apache::thrift::transport::THeader>(
      apache::thrift::transport::THeader::ALLOW_BIG_FRAMES);
  header->setProtocolId(channel_->getProtocolId());
  if (rpcOptions) {
    header->setHeaders(rpcOptions->releaseWriteHeaders());
  }

  auto ctx = apache::thrift::ContextStack::createWithClientContext(
      handlers_,
      getServiceName(),
      "ChatRoomService.getMessages",
      *header);

  return {std::move(ctx), std::move(header)};
}

void ChatRoomServiceAsyncClient::sync_getMessages(::example::chatroom::GetMessagesResponse& _return, const ::example::chatroom::GetMessagesRequest& p_req) {
  ::apache::thrift::RpcOptions rpcOptions;
  sync_getMessages(rpcOptions, _return, p_req);
}

void ChatRoomServiceAsyncClient::sync_getMessages(apache::thrift::RpcOptions& rpcOptions, ::example::chatroom::GetMessagesResponse& _return, const ::example::chatroom::GetMessagesRequest& p_req) {
  apache::thrift::ClientReceiveState returnState;
  apache::thrift::ClientSyncCallback<false> callback(&returnState);
  auto protocolId = apache::thrift::GeneratedAsyncClient::getChannel()->getProtocolId();
  auto evb = apache::thrift::GeneratedAsyncClient::getChannel()->getEventBase();
  auto ctxAndHeader = getMessagesCtx(&rpcOptions);
  auto wrappedCallback = apache::thrift::RequestClientCallback::Ptr(&callback);
  callback.waitUntilDone(
    evb,
    [&] {
      getMessagesImpl(rpcOptions, std::move(ctxAndHeader.second), ctxAndHeader.first.get(), std::move(wrappedCallback), p_req);
    });

  if (returnState.isException()) {
    returnState.exception().throw_exception();
  }
  returnState.resetProtocolId(protocolId);
  returnState.resetCtx(std::move(ctxAndHeader.first));
  SCOPE_EXIT {
    if (returnState.header() && !returnState.header()->getHeaders().empty()) {
      rpcOptions.setReadHeaders(returnState.header()->releaseHeaders());
    }
  };
  return folly::fibers::runInMainContext([&] {
      recv_getMessages(_return, returnState);
  });
}


folly::Future<::example::chatroom::GetMessagesResponse> ChatRoomServiceAsyncClient::future_getMessages(const ::example::chatroom::GetMessagesRequest& p_req) {
  ::apache::thrift::RpcOptions rpcOptions;
  return future_getMessages(rpcOptions, p_req);
}

folly::SemiFuture<::example::chatroom::GetMessagesResponse> ChatRoomServiceAsyncClient::semifuture_getMessages(const ::example::chatroom::GetMessagesRequest& p_req) {
  ::apache::thrift::RpcOptions rpcOptions;
  return semifuture_getMessages(rpcOptions, p_req);
}

folly::Future<::example::chatroom::GetMessagesResponse> ChatRoomServiceAsyncClient::future_getMessages(apache::thrift::RpcOptions& rpcOptions, const ::example::chatroom::GetMessagesRequest& p_req) {
  folly::Promise<::example::chatroom::GetMessagesResponse> promise;
  auto future = promise.getFuture();
  auto callback = std::make_unique<apache::thrift::FutureCallback<::example::chatroom::GetMessagesResponse>>(std::move(promise), recv_wrapped_getMessages, channel_);
  getMessages(rpcOptions, std::move(callback), p_req);
  return future;
}

folly::SemiFuture<::example::chatroom::GetMessagesResponse> ChatRoomServiceAsyncClient::semifuture_getMessages(apache::thrift::RpcOptions& rpcOptions, const ::example::chatroom::GetMessagesRequest& p_req) {
  auto callbackAndFuture = makeSemiFutureCallback(recv_wrapped_getMessages, channel_);
  auto callback = std::move(callbackAndFuture.first);
  getMessages(rpcOptions, std::move(callback), p_req);
  return std::move(callbackAndFuture.second);
}

folly::Future<std::pair<::example::chatroom::GetMessagesResponse, std::unique_ptr<apache::thrift::transport::THeader>>> ChatRoomServiceAsyncClient::header_future_getMessages(apache::thrift::RpcOptions& rpcOptions, const ::example::chatroom::GetMessagesRequest& p_req) {
  folly::Promise<std::pair<::example::chatroom::GetMessagesResponse, std::unique_ptr<apache::thrift::transport::THeader>>> promise;
  auto future = promise.getFuture();
  auto callback = std::make_unique<apache::thrift::HeaderFutureCallback<::example::chatroom::GetMessagesResponse>>(std::move(promise), recv_wrapped_getMessages, channel_);
  getMessages(rpcOptions, std::move(callback), p_req);
  return future;
}

folly::SemiFuture<std::pair<::example::chatroom::GetMessagesResponse, std::unique_ptr<apache::thrift::transport::THeader>>> ChatRoomServiceAsyncClient::header_semifuture_getMessages(apache::thrift::RpcOptions& rpcOptions, const ::example::chatroom::GetMessagesRequest& p_req) {
  auto callbackAndFuture = makeHeaderSemiFutureCallback(recv_wrapped_getMessages, channel_);
  auto callback = std::move(callbackAndFuture.first);
  getMessages(rpcOptions, std::move(callback), p_req);
  return std::move(callbackAndFuture.second);
}

void ChatRoomServiceAsyncClient::getMessages(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, const ::example::chatroom::GetMessagesRequest& p_req) {
  getMessages(std::make_unique<apache::thrift::FunctionReplyCallback>(std::move(callback)), p_req);
}

#if FOLLY_HAS_COROUTINES
#endif // FOLLY_HAS_COROUTINES
folly::exception_wrapper ChatRoomServiceAsyncClient::recv_wrapped_getMessages(::example::chatroom::GetMessagesResponse& _return, ::apache::thrift::ClientReceiveState& state) {
  if (state.isException()) {
    return std::move(state.exception());
  }
  if (!state.hasResponseBuffer()) {
    return folly::make_exception_wrapper<apache::thrift::TApplicationException>("recv_ called without result");
  }

  using result = ChatRoomService_getMessages_presult;
  switch (state.protocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolReader reader;
      return apache::thrift::detail::ac::recv_wrapped<result>(
          &reader, state, _return);
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolReader reader;
      return apache::thrift::detail::ac::recv_wrapped<result>(
          &reader, state, _return);
    }
    default:
    {
    }
  }
  return folly::make_exception_wrapper<apache::thrift::TApplicationException>("Could not find Protocol");
}

void ChatRoomServiceAsyncClient::recv_getMessages(::example::chatroom::GetMessagesResponse& _return, ::apache::thrift::ClientReceiveState& state) {
  auto ew = recv_wrapped_getMessages(_return, state);
  if (ew) {
    ew.throw_exception();
  }
}

void ChatRoomServiceAsyncClient::recv_instance_getMessages(::example::chatroom::GetMessagesResponse& _return, ::apache::thrift::ClientReceiveState& state) {
  return recv_getMessages(_return, state);
}

folly::exception_wrapper ChatRoomServiceAsyncClient::recv_instance_wrapped_getMessages(::example::chatroom::GetMessagesResponse& _return, ::apache::thrift::ClientReceiveState& state) {
  return recv_wrapped_getMessages(_return, state);
}

void ChatRoomServiceAsyncClient::sendMessage(std::unique_ptr<apache::thrift::RequestCallback> callback, const ::example::chatroom::SendMessageRequest& p_req) {
  ::apache::thrift::RpcOptions rpcOptions;
  sendMessage(rpcOptions, std::move(callback), p_req);
}

void ChatRoomServiceAsyncClient::sendMessage(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const ::example::chatroom::SendMessageRequest& p_req) {
  auto [ctx, header] = sendMessageCtx(&rpcOptions);
  apache::thrift::RequestCallback::Context callbackContext;
  callbackContext.protocolId =
      apache::thrift::GeneratedAsyncClient::getChannel()->getProtocolId();
  auto* contextStack = ctx.get();
  if (callback) {
    callbackContext.ctx = std::move(ctx);
  }
  auto wrappedCallback = apache::thrift::toRequestClientCallbackPtr(std::move(callback), std::move(callbackContext));
  sendMessageImpl(rpcOptions, std::move(header), contextStack, std::move(wrappedCallback), p_req);
}

void ChatRoomServiceAsyncClient::sendMessageImpl(apache::thrift::RpcOptions& rpcOptions, std::shared_ptr<apache::thrift::transport::THeader> header, apache::thrift::ContextStack* contextStack, apache::thrift::RequestClientCallback::Ptr callback, const ::example::chatroom::SendMessageRequest& p_req, bool stealRpcOptions) {
  switch (apache::thrift::GeneratedAsyncClient::getChannel()->getProtocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolWriter writer;
      if (stealRpcOptions) {
        sendMessageT(&writer, std::move(rpcOptions), std::move(header), contextStack, std::move(callback), p_req);
      } else {
        sendMessageT(&writer, rpcOptions, std::move(header), contextStack, std::move(callback), p_req);
      }
      break;
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolWriter writer;
      if (stealRpcOptions) {
        sendMessageT(&writer, std::move(rpcOptions), std::move(header), contextStack, std::move(callback), p_req);
      } else {
        sendMessageT(&writer, rpcOptions, std::move(header), contextStack, std::move(callback), p_req);
      }
      break;
    }
    default:
    {
      apache::thrift::detail::ac::throw_app_exn("Could not find Protocol");
    }
  }
}

std::pair<std::unique_ptr<::apache::thrift::ContextStack>, std::shared_ptr<::apache::thrift::transport::THeader>> ChatRoomServiceAsyncClient::sendMessageCtx(apache::thrift::RpcOptions* rpcOptions) {
  auto header = std::make_shared<apache::thrift::transport::THeader>(
      apache::thrift::transport::THeader::ALLOW_BIG_FRAMES);
  header->setProtocolId(channel_->getProtocolId());
  if (rpcOptions) {
    header->setHeaders(rpcOptions->releaseWriteHeaders());
  }

  auto ctx = apache::thrift::ContextStack::createWithClientContext(
      handlers_,
      getServiceName(),
      "ChatRoomService.sendMessage",
      *header);

  return {std::move(ctx), std::move(header)};
}

void ChatRoomServiceAsyncClient::sync_sendMessage(const ::example::chatroom::SendMessageRequest& p_req) {
  ::apache::thrift::RpcOptions rpcOptions;
  sync_sendMessage(rpcOptions, p_req);
}

void ChatRoomServiceAsyncClient::sync_sendMessage(apache::thrift::RpcOptions& rpcOptions, const ::example::chatroom::SendMessageRequest& p_req) {
  apache::thrift::ClientReceiveState returnState;
  apache::thrift::ClientSyncCallback<false> callback(&returnState);
  auto protocolId = apache::thrift::GeneratedAsyncClient::getChannel()->getProtocolId();
  auto evb = apache::thrift::GeneratedAsyncClient::getChannel()->getEventBase();
  auto ctxAndHeader = sendMessageCtx(&rpcOptions);
  auto wrappedCallback = apache::thrift::RequestClientCallback::Ptr(&callback);
  callback.waitUntilDone(
    evb,
    [&] {
      sendMessageImpl(rpcOptions, std::move(ctxAndHeader.second), ctxAndHeader.first.get(), std::move(wrappedCallback), p_req);
    });

  if (returnState.isException()) {
    returnState.exception().throw_exception();
  }
  returnState.resetProtocolId(protocolId);
  returnState.resetCtx(std::move(ctxAndHeader.first));
  SCOPE_EXIT {
    if (returnState.header() && !returnState.header()->getHeaders().empty()) {
      rpcOptions.setReadHeaders(returnState.header()->releaseHeaders());
    }
  };
  return folly::fibers::runInMainContext([&] {
      recv_sendMessage(returnState);
  });
}


folly::Future<folly::Unit> ChatRoomServiceAsyncClient::future_sendMessage(const ::example::chatroom::SendMessageRequest& p_req) {
  ::apache::thrift::RpcOptions rpcOptions;
  return future_sendMessage(rpcOptions, p_req);
}

folly::SemiFuture<folly::Unit> ChatRoomServiceAsyncClient::semifuture_sendMessage(const ::example::chatroom::SendMessageRequest& p_req) {
  ::apache::thrift::RpcOptions rpcOptions;
  return semifuture_sendMessage(rpcOptions, p_req);
}

folly::Future<folly::Unit> ChatRoomServiceAsyncClient::future_sendMessage(apache::thrift::RpcOptions& rpcOptions, const ::example::chatroom::SendMessageRequest& p_req) {
  folly::Promise<folly::Unit> promise;
  auto future = promise.getFuture();
  auto callback = std::make_unique<apache::thrift::FutureCallback<folly::Unit>>(std::move(promise), recv_wrapped_sendMessage, channel_);
  sendMessage(rpcOptions, std::move(callback), p_req);
  return future;
}

folly::SemiFuture<folly::Unit> ChatRoomServiceAsyncClient::semifuture_sendMessage(apache::thrift::RpcOptions& rpcOptions, const ::example::chatroom::SendMessageRequest& p_req) {
  auto callbackAndFuture = makeSemiFutureCallback(recv_wrapped_sendMessage, channel_);
  auto callback = std::move(callbackAndFuture.first);
  sendMessage(rpcOptions, std::move(callback), p_req);
  return std::move(callbackAndFuture.second);
}

folly::Future<std::pair<folly::Unit, std::unique_ptr<apache::thrift::transport::THeader>>> ChatRoomServiceAsyncClient::header_future_sendMessage(apache::thrift::RpcOptions& rpcOptions, const ::example::chatroom::SendMessageRequest& p_req) {
  folly::Promise<std::pair<folly::Unit, std::unique_ptr<apache::thrift::transport::THeader>>> promise;
  auto future = promise.getFuture();
  auto callback = std::make_unique<apache::thrift::HeaderFutureCallback<folly::Unit>>(std::move(promise), recv_wrapped_sendMessage, channel_);
  sendMessage(rpcOptions, std::move(callback), p_req);
  return future;
}

folly::SemiFuture<std::pair<folly::Unit, std::unique_ptr<apache::thrift::transport::THeader>>> ChatRoomServiceAsyncClient::header_semifuture_sendMessage(apache::thrift::RpcOptions& rpcOptions, const ::example::chatroom::SendMessageRequest& p_req) {
  auto callbackAndFuture = makeHeaderSemiFutureCallback(recv_wrapped_sendMessage, channel_);
  auto callback = std::move(callbackAndFuture.first);
  sendMessage(rpcOptions, std::move(callback), p_req);
  return std::move(callbackAndFuture.second);
}

void ChatRoomServiceAsyncClient::sendMessage(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, const ::example::chatroom::SendMessageRequest& p_req) {
  sendMessage(std::make_unique<apache::thrift::FunctionReplyCallback>(std::move(callback)), p_req);
}

#if FOLLY_HAS_COROUTINES
#endif // FOLLY_HAS_COROUTINES
folly::exception_wrapper ChatRoomServiceAsyncClient::recv_wrapped_sendMessage(::apache::thrift::ClientReceiveState& state) {
  if (state.isException()) {
    return std::move(state.exception());
  }
  if (!state.hasResponseBuffer()) {
    return folly::make_exception_wrapper<apache::thrift::TApplicationException>("recv_ called without result");
  }

  using result = ChatRoomService_sendMessage_presult;
  switch (state.protocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolReader reader;
      return apache::thrift::detail::ac::recv_wrapped<result>(
          &reader, state);
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolReader reader;
      return apache::thrift::detail::ac::recv_wrapped<result>(
          &reader, state);
    }
    default:
    {
    }
  }
  return folly::make_exception_wrapper<apache::thrift::TApplicationException>("Could not find Protocol");
}

void ChatRoomServiceAsyncClient::recv_sendMessage(::apache::thrift::ClientReceiveState& state) {
  auto ew = recv_wrapped_sendMessage(state);
  if (ew) {
    ew.throw_exception();
  }
}

void ChatRoomServiceAsyncClient::recv_instance_sendMessage(::apache::thrift::ClientReceiveState& state) {
  recv_sendMessage(state);
}

folly::exception_wrapper ChatRoomServiceAsyncClient::recv_instance_wrapped_sendMessage(::apache::thrift::ClientReceiveState& state) {
  return recv_wrapped_sendMessage(state);
}


}} // example::chatroom
